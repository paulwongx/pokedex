{"version":3,"sources":["constants.js","Pokedex.js","Pokemon.js","App.js","serviceWorker.js","index.js"],"names":["toFirstCharUpperCase","name","charAt","toUpperCase","slice","useStyles","makeStyles","theme","pokedexContainer","paddingTop","paddingLeft","paddingRight","cardMedia","margin","cardContent","textAlign","searchContainer","display","backgroundColor","fade","palette","common","white","marginTop","marginBottom","searchIcon","alignSelf","searchInput","width","Pokedex","props","history","classes","useState","pokemonData","setPokemonData","filter","setFilter","useEffect","axios","get","then","response","results","data","newPokemonData","forEach","pokemon","i","id","sprite","AppBar","position","Toolbar","className","TextField","onChange","e","target","value","label","variant","Grid","container","spacing","Object","keys","map","pokemonId","includes","console","log","item","xs","sm","key","Card","onClick","push","CardMedia","image","style","height","CardContent","Typography","getPokemonCard","CircularProgress","Pokemon","match","params","undefined","setPokemon","catch","err","species","weight","types","sprites","fullImageUrl","front_shiny","src","Link","href","url","typeInfo","type","generatePokemonJSX","Button","App","exact","path","render","Boolean","window","location","hostname","createBrowserHistory","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8TAAaA,EAAuB,SAAAC,GAAI,OACpCA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,I,iBCiBxCC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,iBAAkB,CAChBC,WAAY,OACZC,YAAa,OACbC,aAAc,QAEhBC,UAAW,CACTC,OAAQ,QAEVC,YAAa,CACXC,UAAW,UAEbC,gBAAiB,CACfC,QAAS,OACTC,gBAAiBC,YAAKZ,EAAMa,QAAQC,OAAOC,MAAO,KAClDZ,YAAa,OACbC,aAAc,OACdY,UAAW,MACXC,aAAc,OAEhBC,WAAY,CACVC,UAAW,WACXF,aAAc,OAEhBG,YAAa,CACXC,MAAO,QACPf,OAAQ,WAmFGgB,EA/EC,SAACC,GAAW,IAClBC,EAAYD,EAAZC,QACFC,EAAU3B,IAFS,EAGa4B,mBAAS,IAHtB,mBAGlBC,EAHkB,KAGLC,EAHK,OAIGF,mBAAS,IAJZ,mBAIlBG,EAJkB,KAIVC,EAJU,KAUzBC,qBAAU,WACRC,IACGC,IAAI,+CACJC,MAAK,SAACC,GAAc,IAEXC,EADSD,EAATE,KACAD,QACFE,EAAiB,GACvBF,EAAQG,SAAQ,SAACC,EAASC,GACxBH,EAAeG,EAAI,GAAK,CACtBC,GAAID,EAAI,EACR/C,KAAM8C,EAAQ9C,KACdiD,OAAO,4EAAD,OACJF,EAAI,EADA,YAKVb,EAAeU,QAElB,IAuBH,OACE,oCACE,kBAACM,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,yBAAKC,UAAWtB,EAAQhB,iBACtB,kBAAC,IAAD,CAAYsC,UAAWtB,EAAQP,aAC/B,kBAAC8B,EAAA,EAAD,CACIC,SApDe,SAAAC,GACvBpB,EAAUoB,EAAEC,OAAOC,QAoDXL,UAAWtB,EAAQL,YACnBiC,MAAM,qBACNC,QAAQ,gBAIjB3B,EACC,kBAAC4B,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGV,UAAWtB,EAAQxB,kBAC5CyD,OAAOC,KAAKhC,GAAaiC,KAAI,SAACC,GAAD,OAC5BlC,EAAYkC,GAAWnE,KAAKoE,SAASjC,IAtCxB,SAACgC,GACtBE,QAAQC,IAAIrC,EAAYkC,IADY,MAEPlC,EAAYkC,GAAjCnB,EAF4B,EAE5BA,GAAIhD,EAFwB,EAExBA,KAAMiD,EAFkB,EAElBA,OAGlB,OACE,kBAACY,EAAA,EAAD,CAAMU,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,IAAKP,GAC7B,kBAACQ,EAAA,EAAD,CAAMC,QAAS,kBAAM9C,EAAQ+C,KAAR,WAAiBV,MACpC,kBAACW,EAAA,EAAD,CACEzB,UAAWtB,EAAQpB,UACnBoE,MAAO9B,EACP+B,MAAO,CAAErD,MAAO,QAASsD,OAAQ,WAEnC,kBAACC,EAAA,EAAD,CAAa7B,UAAWtB,EAAQlB,aAC9B,kBAACsE,EAAA,EAAD,eAAgBnC,EAAhB,aAAuBjD,EAAqBC,QAyB5CoF,CAAejB,OAInB,kBAACkB,EAAA,EAAD,Q,kBCtDOC,EA7DC,SAACzD,GAAW,IAChBC,EAAmBD,EAAnBC,QAEAqC,EAFmBtC,EAAV0D,MACTC,OACArB,UAHe,EAIOnC,wBAASyD,GAJhB,mBAIhB3C,EAJgB,KAIP4C,EAJO,KAMvBrD,qBAAU,WACNC,IACKC,IADL,4CAC8C4B,EAD9C,MAEK3B,MAAK,SAAAC,GAAa,IACRE,EAAQF,EAARE,KACP+C,EAAW/C,MAElBgD,OAAM,SAAAC,GAAG,OAAIF,GAAW,QAC3B,CAACvB,IA8BH,OAII,yCACasB,IAAZ3C,GAAyB,kBAACuC,EAAA,EAAD,WACbI,IAAZ3C,GAAyBA,GAjCH,WAAO,IACvB9C,EAAqD8C,EAArD9C,KAAMgD,EAA+CF,EAA/CE,GAAI6C,EAA2C/C,EAA3C+C,QAASZ,EAAkCnC,EAAlCmC,OAAQa,EAA0BhD,EAA1BgD,OAAQC,EAAkBjD,EAAlBiD,MAAOC,EAAWlD,EAAXkD,QAC3CC,EAAY,wDAAoDjD,EAApD,QACVkD,EAAgBF,EAAhBE,YACR,OACI,oCACI,kBAACf,EAAA,EAAD,CAAYvB,QAAQ,MAApB,UACQZ,EADR,SACgBjD,EAAqBC,GACjC,yBAAKmG,IAAKD,KAEd,yBAAKlB,MAAO,CAACrD,MAAO,QAASsD,OAAQ,SAAUkB,IAAKF,IACpD,kBAACd,EAAA,EAAD,CAAYvB,QAAQ,MAApB,gBACA,kBAACuB,EAAA,EAAD,KACK,YADL,IACkB,kBAACiB,EAAA,EAAD,CAAMC,KAAMR,EAAQS,KAAMT,EAAQ7F,MAChD,kBAACmF,EAAA,EAAD,gBAAqBF,GACrB,kBAACE,EAAA,EAAD,gBAAqBW,GACrB,kBAACX,EAAA,EAAD,CAAYvB,QAAQ,MAApB,WACKmC,EAAM7B,KAAI,SAAAqC,GAAa,IAEbvG,EADQuG,EAARC,KACAxG,KACP,OAAO,kBAACmF,EAAA,EAAD,CAAYT,IAAK1E,GAAjB,cAA4BA,SAalByG,IACxB,IAAZ3D,GAAqB,kBAACqC,EAAA,EAAD,+BACTM,IAAZ3C,GACG,kBAAC4D,EAAA,EAAD,CAAQ9C,QAAQ,YAAYgB,QAAS,kBAAK9C,EAAQ+C,KAAK,OAAvD,qB,SC3CG8B,EAXH,kBACV,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAACjF,GAAD,OAAW,kBAAC,EAAYA,MACtD,kBAAC,IAAD,CACE+E,OAAK,EACLC,KAAK,cACLC,OAAQ,SAACjF,GAAD,OAAW,kBAAC,EAAYA,QCClBkF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS3B,MACvB,2D,YCXAzD,EAAUqF,cAChBC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,IAAD,CAAQvF,QAASA,GACf,kBAAC,EAAD,QAGJwF,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlF,MAAK,SAAAmF,GACJA,EAAaC,gBAEdjC,OAAM,SAAAkC,GACLxD,QAAQwD,MAAMA,EAAMC,c","file":"static/js/main.814ff6c2.chunk.js","sourcesContent":["export const toFirstCharUpperCase = name =>\r\n    name.charAt(0).toUpperCase() + name.slice(1);","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  CardMedia,\r\n  CircularProgress,\r\n  Typography,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport mockData from \"./mockData\";\r\nimport { toFirstCharUpperCase } from \"./constants\";\r\nimport axios from \"axios\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  pokedexContainer: {\r\n    paddingTop: \"20px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n  cardMedia: {\r\n    margin: \"auto\",\r\n  },\r\n  cardContent: {\r\n    textAlign: \"center\",\r\n  },\r\n  searchContainer: {\r\n    display: \"flex\",\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    paddingLeft: \"20px\",\r\n    paddingRight: \"20px\",\r\n    marginTop: \"5px\",\r\n    marginBottom: \"5px\",\r\n  },\r\n  searchIcon: {\r\n    alignSelf: \"flex-end\",\r\n    marginBottom: \"5px\",\r\n  },\r\n  searchInput: {\r\n    width: \"200px\",\r\n    margin: \"5px\",\r\n  },\r\n}));\r\n\r\nconst Pokedex = (props) => {\r\n  const { history } = props;\r\n  const classes = useStyles();\r\n  const [pokemonData, setPokemonData] = useState({});\r\n  const [filter, setFilter] = useState('');\r\n\r\n    const handleSearchChange = e => {\r\n        setFilter(e.target.value);\r\n    };\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"https://pokeapi.co/api/v2/pokemon?limit=807\")\r\n      .then((response) => {\r\n        const { data } = response;\r\n        const { results } = data;\r\n        const newPokemonData = {};\r\n        results.forEach((pokemon, i) => {\r\n          newPokemonData[i + 1] = {\r\n            id: i + 1,\r\n            name: pokemon.name,\r\n            sprite: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${\r\n              i + 1\r\n            }.png`,\r\n          };\r\n        });\r\n        setPokemonData(newPokemonData);\r\n      });\r\n  }, []);\r\n\r\n  const getPokemonCard = (pokemonId) => {\r\n    console.log(pokemonData[pokemonId]);\r\n    const { id, name, sprite } = pokemonData[pokemonId];\r\n    //const sprite = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`;\r\n\r\n    return (\r\n      <Grid item xs={12} sm={4} key={pokemonId}>\r\n        <Card onClick={() => history.push(`/${pokemonId}`)}>\r\n          <CardMedia\r\n            className={classes.cardMedia}\r\n            image={sprite}\r\n            style={{ width: \"130px\", height: \"130px\" }}\r\n          />\r\n          <CardContent className={classes.cardContent}>\r\n            <Typography>{`${id}. ${toFirstCharUpperCase(name)}`}</Typography>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <div className={classes.searchContainer}>\r\n            <SearchIcon className={classes.searchIcon} />\r\n            <TextField\r\n                onChange={handleSearchChange}\r\n                className={classes.searchInput}\r\n                label='Enter Pokemon Name'\r\n                variant='standard' />\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {pokemonData ? (\r\n        <Grid container spacing={2} className={classes.pokedexContainer}>\r\n          {Object.keys(pokemonData).map((pokemonId) =>\r\n            pokemonData[pokemonId].name.includes(filter) &&\r\n            getPokemonCard(pokemonId)\r\n          )}\r\n        </Grid>\r\n      ) : (\r\n        <CircularProgress />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Pokedex;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport mockData from \"./mockData\";\r\nimport { Typography, Link, CircularProgress, Button } from \"@material-ui/core\";\r\nimport { toFirstCharUpperCase } from './constants';\r\nimport axios from 'axios';\r\n\r\nconst Pokemon = (props) => {\r\n    const { history, match } = props;\r\n    const { params } = match;\r\n    const { pokemonId } = params;\r\n    const [pokemon, setPokemon] = useState(undefined);\r\n\r\n    useEffect(()=> {\r\n        axios\r\n            .get(`https://pokeapi.co/api/v2/pokemon/${pokemonId}/`)\r\n            .then(response => {\r\n                const {data} = response;\r\n                setPokemon(data);\r\n        })\r\n        .catch(err => setPokemon(false));\r\n    },[pokemonId]);\r\n\r\n\r\n    const generatePokemonJSX = () => {\r\n        const {name, id, species, height, weight, types, sprites} = pokemon;\r\n        const fullImageUrl = `https://pokeres.bastionbot.org/images/pokemon/${id}.png`;\r\n        const { front_shiny } = sprites;\r\n        return (\r\n            <>\r\n                <Typography variant=\"h1\">\r\n                    {`${id}.`} {toFirstCharUpperCase(name)}\r\n                    <img src={front_shiny} />\r\n                </Typography>\r\n                <img style={{width: '300px', height: '300px'}} src={fullImageUrl} />\r\n                <Typography variant='h2'>Pokemon Info</Typography>\r\n                <Typography>\r\n                    {'Species: '} <Link href={species.url}>{species.name}</Link>\r\n                    <Typography>Height: {height}</Typography>\r\n                    <Typography>Weight: {weight}</Typography>\r\n                    <Typography variant='h6'>Types: </Typography>\r\n                        {types.map(typeInfo => {\r\n                            const {type} = typeInfo;\r\n                            const {name} = type;\r\n                            return <Typography key={name}> {`${name}`}</Typography>\r\n                        })}\r\n                </Typography>\r\n            </>\r\n        )\r\n    };\r\n\r\n    return (\r\n        // 1. pokemon=undefined, so return loading progress\r\n        // 2. pokemon = good data, so return actual info\r\n        // 3. pokemon = bad data / false, so return pokemon not found\r\n        <>\r\n        {pokemon === undefined && <CircularProgress/>}\r\n        {pokemon !== undefined && pokemon && generatePokemonJSX()}\r\n        {pokemon === false && <Typography>Pokemon not found</Typography>}\r\n        {pokemon !== undefined && (\r\n            <Button variant='contained' onClick={()=> history.push('/')}>\r\n                Back to pokedex\r\n            </Button>\r\n        )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Pokemon;","import React from \"react\";\nimport Pokedex from \"./Pokedex\";\nimport Pokemon from \"./Pokemon\";\nimport { Route, Switch } from \"react-router-dom\";\n\nconst App = () => (\n  <Switch>\n    <Route exact path=\"/\" render={(props) => <Pokedex {...props} />} />\n    <Route\n      exact\n      path=\"/:pokemonId\"\n      render={(props) => <Pokemon {...props} />}\n    />\n  </Switch>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Router } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\n\nconst history = createBrowserHistory();\nReactDOM.render(\n  <React.StrictMode>\n    <Router history={history}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}